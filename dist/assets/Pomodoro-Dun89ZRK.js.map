{"version":3,"file":"Pomodoro-Dun89ZRK.js","sources":["../../node_modules/lucide-react/dist/esm/icons/pause.js","../../node_modules/lucide-react/dist/esm/icons/play.js","../../node_modules/lucide-react/dist/esm/icons/refresh-cw.js","../../node_modules/lucide-react/dist/esm/icons/target.js","../../node_modules/lucide-react/dist/esm/icons/timer.js","../../src/components/ui/TimePicker.tsx","../../src/pages/Pomodoro.tsx"],"sourcesContent":["/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Pause = createLucideIcon(\"Pause\", [\n  [\"rect\", { width: \"4\", height: \"16\", x: \"6\", y: \"4\", key: \"iffhe4\" }],\n  [\"rect\", { width: \"4\", height: \"16\", x: \"14\", y: \"4\", key: \"sjin7j\" }]\n]);\n\nexport { Pause as default };\n//# sourceMappingURL=pause.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Play = createLucideIcon(\"Play\", [\n  [\"polygon\", { points: \"5 3 19 12 5 21 5 3\", key: \"191637\" }]\n]);\n\nexport { Play as default };\n//# sourceMappingURL=play.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst RefreshCw = createLucideIcon(\"RefreshCw\", [\n  [\"path\", { d: \"M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8\", key: \"v9h5vc\" }],\n  [\"path\", { d: \"M21 3v5h-5\", key: \"1q7to0\" }],\n  [\"path\", { d: \"M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16\", key: \"3uifl3\" }],\n  [\"path\", { d: \"M8 16H3v5\", key: \"1cv678\" }]\n]);\n\nexport { RefreshCw as default };\n//# sourceMappingURL=refresh-cw.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Target = createLucideIcon(\"Target\", [\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"10\", key: \"1mglay\" }],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"6\", key: \"1vlfrh\" }],\n  [\"circle\", { cx: \"12\", cy: \"12\", r: \"2\", key: \"1c9p78\" }]\n]);\n\nexport { Target as default };\n//# sourceMappingURL=target.js.map\n","/**\n * @license lucide-react v0.294.0 - ISC\n *\n * This source code is licensed under the ISC license.\n * See the LICENSE file in the root directory of this source tree.\n */\n\nimport createLucideIcon from '../createLucideIcon.js';\n\nconst Timer = createLucideIcon(\"Timer\", [\n  [\"line\", { x1: \"10\", x2: \"14\", y1: \"2\", y2: \"2\", key: \"14vaq8\" }],\n  [\"line\", { x1: \"12\", x2: \"15\", y1: \"14\", y2: \"11\", key: \"17fdiu\" }],\n  [\"circle\", { cx: \"12\", cy: \"14\", r: \"8\", key: \"1e1u0o\" }]\n]);\n\nexport { Timer as default };\n//# sourceMappingURL=timer.js.map\n","import React, { useState } from 'react';\n\ninterface TimePickerProps {\n  initialMinutes?: number;\n  initialSeconds?: number;\n  onConfirm: (minutes: number, seconds: number) => void;\n  onCancel: () => void;\n}\n\nconst TimePicker: React.FC<TimePickerProps> = ({ initialMinutes = 0, initialSeconds = 0, onConfirm, onCancel }) => {\n  const [minutes, setMinutes] = useState(initialMinutes);\n  const [seconds, setSeconds] = useState(initialSeconds);\n\n  // Clamp values\n  const clamp = (val: number, min: number, max: number) => Math.max(min, Math.min(max, val));\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-40\">\n      <div className=\"bg-white dark:bg-gray-900 rounded-lg shadow-lg p-6 min-w-[300px]\">\n        <div className=\"flex justify-center items-center space-x-2 mb-4\">\n          <input\n            type=\"number\"\n            min={0}\n            max={180}\n            value={minutes}\n            onChange={e => setMinutes(clamp(Number(e.target.value), 0, 180))}\n            className=\"w-16 px-2 py-1 rounded border text-center text-2xl font-mono\"\n            autoFocus\n          />\n          <span className=\"text-2xl font-bold text-gray-500\">:</span>\n          <input\n            type=\"number\"\n            min={0}\n            max={59}\n            value={seconds}\n            onChange={e => setSeconds(clamp(Number(e.target.value), 0, 59))}\n            className=\"w-16 px-2 py-1 rounded border text-center text-2xl font-mono\"\n          />\n        </div>\n        <div className=\"flex justify-end space-x-2\">\n          <button\n            onClick={onCancel}\n            className=\"px-4 py-2 rounded bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 hover:bg-gray-300 dark:hover:bg-gray-600\"\n          >\n            Cancel\n          </button>\n          <button\n            onClick={() => onConfirm(minutes, seconds)}\n            className=\"px-4 py-2 rounded bg-focus-accent text-white hover:bg-opacity-90\"\n          >\n            Set\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TimePicker;\n","import React, { useState, useEffect, useCallback, useMemo } from 'react'\nimport { Play, Pause, RefreshCw, Clock, Timer, Target } from 'lucide-react'\nimport { useLocalStorage } from '../hooks/useLocalStorage'\nimport { PomodoroSettings } from '@/types'\nimport TimePicker from '../components/ui/TimePicker'\n\ntype Mode = 'pomodoro' | 'stopwatch' | 'focus'\n\nconst Pomodoro: React.FC = () => {\n  // TimePicker modal state\n  const [showTimePicker, setShowTimePicker] = useState(false)\n\n  // Focus mode duration (in minutes) input\n  const [focusDuration, setFocusDuration] = useState(50) // default 50 min\n  const [focusInput, setFocusInput] = useState('50') // for input field\n\n  // Default settings with more robust initialization\n  // Pomodoro timer settings\nconst [settings, setSettings] = useLocalStorage<PomodoroSettings>('pomodoroSettings', {\n  workDuration: 25,\n  breakDuration: 5,\n  longBreakDuration: 15,\n  sessionsBeforeLongBreak: 4\n})\n\n// --- Sync with global appSettings (from Settings page) ---\nuseEffect(() => {\n  // Read appSettings from localStorage\n  const appSettingsRaw = localStorage.getItem('appSettings');\n  if (!appSettingsRaw) return;\n  try {\n    const appSettings = JSON.parse(appSettingsRaw);\n    // Only update if values actually changed\n    setSettings(prev => {\n      let changed = false;\n      const newSettings = { ...prev };\n      if (typeof appSettings.defaultPomodoroWorkDuration === 'number' && appSettings.defaultPomodoroWorkDuration !== prev.workDuration) {\n        newSettings.workDuration = appSettings.defaultPomodoroWorkDuration;\n        changed = true;\n      }\n      if (typeof appSettings.defaultBreakDuration === 'number' && appSettings.defaultBreakDuration !== prev.breakDuration) {\n        newSettings.breakDuration = appSettings.defaultBreakDuration;\n        changed = true;\n      }\n      // Optionally sync longBreakDuration, sessionsBeforeLongBreak if present in appSettings\n      if (typeof appSettings.defaultLongBreakDuration === 'number' && appSettings.defaultLongBreakDuration !== prev.longBreakDuration) {\n        newSettings.longBreakDuration = appSettings.defaultLongBreakDuration;\n        changed = true;\n      }\n      if (typeof appSettings.defaultSessionsBeforeLongBreak === 'number' && appSettings.defaultSessionsBeforeLongBreak !== prev.sessionsBeforeLongBreak) {\n        newSettings.sessionsBeforeLongBreak = appSettings.defaultSessionsBeforeLongBreak;\n        changed = true;\n      }\n      return changed ? newSettings : prev;\n    });\n  } catch {}\n}, []); // Run once on mount\n\n// Listen for appSettings changes (e.g. when user updates settings)\nuseEffect(() => {\n  const onStorage = (e: StorageEvent) => {\n    if (e.key === 'appSettings') {\n      try {\n        const appSettings = JSON.parse(e.newValue || '');\n        setSettings(prev => {\n          let changed = false;\n          const newSettings = { ...prev };\n          if (typeof appSettings.defaultPomodoroWorkDuration === 'number' && appSettings.defaultPomodoroWorkDuration !== prev.workDuration) {\n            newSettings.workDuration = appSettings.defaultPomodoroWorkDuration;\n            changed = true;\n          }\n          if (typeof appSettings.defaultBreakDuration === 'number' && appSettings.defaultBreakDuration !== prev.breakDuration) {\n            newSettings.breakDuration = appSettings.defaultBreakDuration;\n            changed = true;\n          }\n          if (typeof appSettings.defaultLongBreakDuration === 'number' && appSettings.defaultLongBreakDuration !== prev.longBreakDuration) {\n            newSettings.longBreakDuration = appSettings.defaultLongBreakDuration;\n            changed = true;\n          }\n          if (typeof appSettings.defaultSessionsBeforeLongBreak === 'number' && appSettings.defaultSessionsBeforeLongBreak !== prev.sessionsBeforeLongBreak) {\n            newSettings.sessionsBeforeLongBreak = appSettings.defaultSessionsBeforeLongBreak;\n            changed = true;\n          }\n          return changed ? newSettings : prev;\n        });\n      } catch {}\n    }\n  };\n  window.addEventListener('storage', onStorage);\n  return () => window.removeEventListener('storage', onStorage);\n}, []);\n\n  // Comprehensive state management\n  const [mode, setMode] = useState<Mode>('pomodoro')\n  const [isRunning, setIsRunning] = useState(false)\n  const [sessionsCompleted, setSessionsCompleted] = useState(0)\n  const [isWorkSession, setIsWorkSession] = useState(true)\n\n  // Time calculation based on current mode and session type\n  const calculateInitialTime = useCallback(() => {\n    switch (mode) {\n      case 'pomodoro':\n        return isWorkSession \n          ? settings.workDuration * 60 \n          : (sessionsCompleted % settings.sessionsBeforeLongBreak === 0 \n            ? settings.longBreakDuration * 60 \n            : settings.breakDuration * 60)\n      case 'stopwatch':\n      case 'focus':\n        return 0\n      default:\n        return settings.workDuration * 60\n    }\n  }, [mode, isWorkSession, sessionsCompleted, settings])\n\n  const [timeLeft, setTimeLeft] = useState(calculateInitialTime())\n  // For stopwatch mode (in centiseconds for decimals)\n  const [stopwatchTime, setStopwatchTime] = useState(0) // in centiseconds (1/100th sec)\n\n  // --- Alarm Sound Logic ---\n  // --- Persistent Alarm for Pomodoro Mode ---\n  const alarmRef = React.useRef<HTMLAudioElement | null>(null);\n\n  const playPersistentAlarm = useCallback(() => {\n    if (!alarmRef.current) {\n      const audio = new Audio('/mixkit-happy-bells-notification-937.wav');\n      audio.loop = true;\n      alarmRef.current = audio;\n    }\n    alarmRef.current.currentTime = 0;\n    alarmRef.current.play();\n  }, []);\n\n  const stopPersistentAlarm = useCallback(() => {\n    if (alarmRef.current) {\n      alarmRef.current.pause();\n      alarmRef.current.currentTime = 0;\n      alarmRef.current = null;\n    }\n  }, []);\n\n  // Single play for focus/stopwatch\n  const playAlarm = useCallback(() => {\n    try {\n      const audio = new Audio('/mixkit-happy-bells-notification-937.wav');\n      audio.play();\n    } catch (e) {}\n  }, []);\n\n  // --- Focus session completion alarm control ---\n  const focusAlarmPlayedRef = React.useRef(false);\n\n  // --- Alarm trigger effect ---\n  useEffect(() => {\n    // Pomodoro mode: persistent alarm until user interacts\n    if (mode === 'pomodoro') {\n      if (timeLeft === 0 && isRunning) {\n        playPersistentAlarm();\n      } else {\n        stopPersistentAlarm();\n      }\n    } else {\n      // Stop alarm if not in Pomodoro mode\n      stopPersistentAlarm();\n    }\n    // Focus mode: play sound when session completes (timer reaches 0)\n    if (mode === 'focus') {\n      if (timeLeft === 0 && !focusAlarmPlayedRef.current) {\n        playAlarm();\n        focusAlarmPlayedRef.current = true;\n      }\n      if (timeLeft > 0) {\n        focusAlarmPlayedRef.current = false;\n      }\n    } else {\n      focusAlarmPlayedRef.current = false;\n    }\n    // Stopwatch mode: (optional)\n    // if (mode === 'stopwatch' && isRunning && timeLeft >= 59 * 60 + 59) {\n    //   playAlarm();\n    // }\n  }, [mode, timeLeft, isRunning, playPersistentAlarm, stopPersistentAlarm, playAlarm]);\n\n  // Memoized timer modes for consistent rendering\n  const timerModes = useMemo(() => [\n    { name: 'pomodoro', icon: Clock },\n    { name: 'stopwatch', icon: Timer },\n    { name: 'focus', icon: Target }\n  ], [])\n\n  // Comprehensive timer management effect\n  useEffect(() => {\n    let interval: ReturnType<typeof setInterval> | null = null\n    let rafId: number | null = null\n    let lastTimestamp: number | null = null\n\n    if (isRunning) {\n      if (mode === 'stopwatch') {\n        // Use requestAnimationFrame for smooth stopwatch updates\n        const step = (timestamp: number) => {\n          if (!lastTimestamp) lastTimestamp = timestamp\n          const diff = timestamp - lastTimestamp\n          lastTimestamp = timestamp\n          setStopwatchTime(prev => prev + Math.round(diff / 10)) // centiseconds\n          rafId = requestAnimationFrame(step)\n        }\n        rafId = requestAnimationFrame(step)\n      } else {\n        interval = setInterval(() => {\n          if (mode === 'pomodoro') {\n            setTimeLeft(prevTime => {\n              if (prevTime <= 0) {\n                // Pomodoro session complete\n                const newSessionsCompleted = sessionsCompleted + 1\n                const nextIsWorkSession = !isWorkSession\n                const newDuration = nextIsWorkSession\n                  ? settings.workDuration * 60\n                  : (newSessionsCompleted % settings.sessionsBeforeLongBreak === 0\n                    ? settings.longBreakDuration * 60\n                    : settings.breakDuration * 60)\n                setSessionsCompleted(newSessionsCompleted)\n                setIsWorkSession(nextIsWorkSession)\n                setIsRunning(false)\n                return newDuration\n              }\n              return prevTime - 1\n            })\n          } else if (mode === 'focus') {\n            setTimeLeft(prevTime => {\n              if (prevTime <= 0) {\n                setIsRunning(false)\n                return 0\n              }\n              return prevTime - 1\n            })\n          }\n        }, 1000)\n      }\n    }\n\n    return () => {\n      if (interval) clearInterval(interval)\n      if (rafId) cancelAnimationFrame(rafId)\n      lastTimestamp = null\n    }\n  }, [isRunning, mode, sessionsCompleted, isWorkSession, settings])\n\n  // Reset timer for current mode\n  const resetTimer = useCallback(() => {\n    setIsRunning(false)\n    if (mode === 'pomodoro') {\n      setIsWorkSession(true)\n      setSessionsCompleted(0)\n      setTimeLeft(settings.workDuration * 60)\n    } else if (mode === 'stopwatch') {\n      setStopwatchTime(0)\n    } else if (mode === 'focus') {\n      setTimeLeft(focusDuration * 60)\n    }\n  }, [mode, settings, focusDuration])\n\n  // Mode change handler\n  const handleModeChange = useCallback((newMode: Mode) => {\n    setMode(newMode)\n    setIsRunning(false)\n    setSessionsCompleted(0)\n    setIsWorkSession(true)\n    if (newMode === 'pomodoro') {\n      setTimeLeft(settings.workDuration * 60)\n    } else if (newMode === 'stopwatch') {\n      setStopwatchTime(0)\n    } else if (newMode === 'focus') {\n      setTimeLeft(focusDuration * 60)\n    }\n  }, [settings, focusDuration])\n\n  // Toggle timer for current mode\n  const toggleTimer = useCallback(() => {\n    setIsRunning(prev => !prev)\n  }, [])\n\n  // Utility function to format time\n  // Format stopwatch time as MM:SS:CC (centiseconds)\n  const formatStopwatch = (centiseconds: number) => {\n    const totalSeconds = Math.floor(centiseconds / 100)\n    const cs = centiseconds % 100\n    const minutes = Math.floor(totalSeconds / 60)\n    const seconds = totalSeconds % 60\n    return `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}:${cs.toString().padStart(2, '0')}`\n  }\n\n  // Format normal timer as MM:SS\n  const formatTime = (seconds: number) => {\n    const hours = Math.floor(seconds / 3600)\n    const minutes = Math.floor((seconds % 3600) / 60)\n    const remainingSeconds = seconds % 60\n    return `${hours > 0 ? `${hours.toString().padStart(2, '0')}:` : ''}${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`\n  }\n\n  // Render timer content based on current mode\n  const renderModeContent = () => {\n    switch (mode) {\n      case 'pomodoro':\n        return (\n          <>\n            <div className=\"text-6xl font-bold mb-6 text-focus-accent\">\n              {formatTime(timeLeft)}\n            </div>\n            <div className=\"text-lg mb-4 text-gray-600 dark:text-gray-300\">\n              {isWorkSession ? 'Work Session' : 'Break Time'}\n            </div>\n          </>\n        )\n      case 'stopwatch':\n        return (\n          <>\n            <div className=\"text-6xl font-bold mb-6 text-focus-accent font-mono\" style={{width:'8.5ch',letterSpacing:'0.05em'}}>\n              {formatStopwatch(stopwatchTime)}\n            </div>\n            <div className=\"text-lg mb-4 text-gray-600 dark:text-gray-300\">\n              Stopwatch\n            </div>\n          </>\n        )\n      case 'focus':\n        return (\n          <>\n            {showTimePicker && (\n              <TimePicker\n                initialMinutes={Math.floor(timeLeft / 60)}\n                initialSeconds={timeLeft % 60}\n                onConfirm={(min, sec) => {\n                  setFocusDuration(min)\n                  setTimeLeft(min * 60 + sec)\n                  setShowTimePicker(false)\n                }}\n                onCancel={() => setShowTimePicker(false)}\n              />\n            )}\n            <div className=\"mb-4\">\n              <span className=\"text-gray-600 dark:text-gray-300\">Set your focus time</span>\n            </div>\n            <div\n              className=\"text-6xl font-bold mb-6 text-focus-accent cursor-pointer select-none font-mono\"\n              style={{width:'8.5ch',letterSpacing:'0.05em'}}\n              onClick={() => !isRunning && setShowTimePicker(true)}\n              title=\"Click to set time\"\n            >\n              {formatTime(timeLeft)}\n            </div>\n            <div className=\"text-lg mb-4 text-gray-600 dark:text-gray-300\">\n              Focus Mode\n            </div>\n          </>\n        )\n      default:\n        return null\n    }\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8 dark:bg-gray-900 min-h-screen flex flex-col items-center justify-center\">\n      <h1 className=\"text-3xl font-bold mb-6 text-focus-primary dark:text-white\">\n        Productivity Tracker\n      </h1>\n      \n      {/* Sub Navigation */}\n      <div className=\"flex space-x-4 mb-6\">\n        {timerModes.map(({ name, icon: Icon }) => (\n          <button\n            key={name}\n            onClick={() => handleModeChange(name as Mode)}\n            className={`px-4 py-2 rounded-full flex items-center ${\n              mode === name \n                ? 'bg-focus-accent text-white' \n                : 'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300'\n            }`}\n          >\n            <Icon size={20} className=\"mr-2\" />\n            {name.charAt(0).toUpperCase() + name.slice(1)}\n          </button>\n        ))}\n      </div>\n      \n      <div className=\"bg-white dark:bg-gray-800 p-8 rounded-lg shadow-lg text-center\">\n        {renderModeContent()}\n        \n        <div className=\"flex justify-center space-x-4\">\n          <button \n            onClick={toggleTimer} \n            className=\"bg-focus-accent text-white p-3 rounded-full hover:bg-opacity-90\"\n          >\n            {isRunning ? <Pause size={24} /> : <Play size={24} />}\n          </button>\n          \n          <button \n            onClick={resetTimer} \n            className=\"bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-300 p-3 rounded-full hover:bg-opacity-90\"\n          >\n            <RefreshCw size={24} />\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Pomodoro"],"names":["Pause","createLucideIcon","Play","RefreshCw","Target","Timer","TimePicker","initialMinutes","initialSeconds","onConfirm","onCancel","minutes","setMinutes","useState","seconds","setSeconds","clamp","val","min","max","jsxs","jsx","e","Pomodoro","showTimePicker","setShowTimePicker","focusDuration","setFocusDuration","focusInput","setFocusInput","settings","setSettings","useLocalStorage","useEffect","appSettingsRaw","appSettings","prev","changed","newSettings","onStorage","mode","setMode","isRunning","setIsRunning","sessionsCompleted","setSessionsCompleted","isWorkSession","setIsWorkSession","calculateInitialTime","useCallback","timeLeft","setTimeLeft","stopwatchTime","setStopwatchTime","alarmRef","React","playPersistentAlarm","audio","stopPersistentAlarm","playAlarm","focusAlarmPlayedRef","timerModes","useMemo","Clock","interval","rafId","lastTimestamp","step","timestamp","diff","prevTime","newSessionsCompleted","nextIsWorkSession","newDuration","resetTimer","handleModeChange","newMode","toggleTimer","formatStopwatch","centiseconds","totalSeconds","cs","formatTime","hours","remainingSeconds","renderModeContent","Fragment","sec","name","Icon"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4]}